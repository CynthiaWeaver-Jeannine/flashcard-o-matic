{
  "decks": [
    {
      "id": 1,
      "name": "Rendering in React",
      "description": "React's component structure allows for quickly building a complex web application that relies on DOM manipulation. "
    },
    {
      "name": "React Router",
      "description": "React Router is a collection of navigational components that compose declaratively with your application.",
      "id": 2
    },
    {
      "id": 3,
      "name": "Frontend Development",
      "description": "Practice terminology and concepts related to aspects of Frontend Development"
    },
    {
      "id": 4,
      "name": "Trees",
      "description": "DSA Terminology: Trees are a type of hierarchical data structure."
    },
    {
      "id": 5,
      "name": "Linked Lists ",
      "description": "DSA Terminology: Practice with terms and implementation concepts for Linked Lists"
    },
    {
      "id": 6,
      "name": "Stacks and Queues",
      "description": "DSA Terminology: Practice with terms and implementation concepts for Stacks and Queues "
    },
    {
      "name": "React State Management",
      "description": "Terminology, concepts, and implementation for React State Management",
      "id": 7
    }
  ],
  "cards": [
    {
      "deckId": 1,
      "id": 1,
      "front": "Differentiate between Real DOM and Virtual DOM.",
      "back": "Virtual DOM updates are faster but do not directly update the HTML"
    },
    {
      "id": 2,
      "front": "How do you modify the state of a different React component?",
      "back": "Not at all! State is visible to the component only.",
      "deckId": 1
    },
    {
      "id": 3,
      "front": "How do you pass data 'down' to a React child component?",
      "back": "As properties or props",
      "deckId": 1
    },
    {
      "front": "What path will match the follow Route?\n<Route>\n  <NotFound />\n</Route>",
      "back": "All paths. A route with no path matches all URL's",
      "deckId": 2,
      "id": 4
    },
    {
      "front": "What does <Switch> do?",
      "back": "Renders the first matching child <Route> ",
      "deckId": 2,
      "id": 5
    },
    {
      "id": 6,
      "front": "example edit",
      "back": "example edit"
    },
    {
      "deckId": 4,
      "id": 7,
      "front": "Tree structure",
      "back": "A type of structure that includes a single root and multiple levels of organization."
    },
    {
      "front": "Root node",
      "back": "A special node with no parent, from which all other nodes descend.",
      "deckId": 4,
      "id": 8
    },
    {
      "front": "Leaf node",
      "back": "a node without children.",
      "deckId": 4,
      "id": 9
    },
    {
      "deckId": 4,
      "id": 10,
      "front": "Binary tree",
      "back": "a tree with an additional limitation: each node can only have zero, one, or two children(at most).  "
    },
    {
      "deckId": 4,
      "id": 11,
      "front": "Subtree",
      "back": "A mini tree within a binary tree, whose root can be any node, and all of its descendants are rooted at that node."
    },
    {
      "front": "What is the relationship between nodes in a tree?",
      "back": "parent-child relationship",
      "deckId": 4,
      "id": 12
    },
    {
      "front": "What is the node in a tree that has no parent and from which all other nodes descend?",
      "back": "root node",
      "deckId": 4,
      "id": 13
    },
    {
      "front": "Which type of node has no children?",
      "back": "a leaf node",
      "deckId": 4,
      "id": 14
    },
    {
      "front": "What is a binary tree?",
      "back": "A binary tree is a tree data structure with an additional limitation: each node in a binary tree can only have zero, one, or two children. It may have a left branch and a right branch. It may also have subtrees.",
      "deckId": 4,
      "id": 15
    },
    {
      "front": "What is a subtree?",
      "back": "A sub tree is a mini tree within a binary tree, whose root can be any node and all of its descendants rooted at that node.",
      "deckId": 4,
      "id": 16
    },
    {
      "front": "What is the relationship between the values of the nodes in a Binary Search Tree",
      "back": "All of the nodes in the left branch are guaranteed to have lower values than the node itself, and all of the nodes in the right branch are guaranteed to have a value higher than the node itself.",
      "deckId": 4,
      "id": 17
    },
    {
      "front": "Binary Search Tree (BST)",
      "back": "Both left and right subtrees are guaranteed to be BSTs themselves. Binary trees tend to be recursive in nature. Binary search trees tend to be recursive in nature.",
      "deckId": 4,
      "id": 18
    },
    {
      "front": "Balanced tree",
      "back": "A tree in which each row contains two times as many nodes as the row before.",
      "deckId": 4,
      "id": 19
    },
    {
      "front": "What are the characteristics of a BST?",
      "back": "Each node has a parent, unless it is a root. Each node in a BST holds a key, a value, a left pointer, and a right pointer. The left and right pointers point to the left and right child nodes.",
      "deckId": 4,
      "id": 20
    },
    {
      "front": "If the ___ property is null, this represents an empty tree.",
      "back": "key",
      "deckId": 4,
      "id": 21
    },
    {
      "front": "If the parent pointer is null, then you are dealing with a _______ node.",
      "back": "root",
      "deckId": 4,
      "id": 22
    },
    {
      "front": "What are the fundamental operations that BSTs suppoprt?",
      "back": "insert(), find(), remove()",
      "deckId": 4,
      "id": 23
    },
    {
      "front": "When inserting a new node into a tree, if there is no existing tree, where should the first item be inserted?",
      "back": "as the root of the tree",
      "deckId": 4,
      "id": 24
    },
    {
      "front": "What is the time complexity for insert(), find(), and remove() methods?",
      "back": "Best case: O(1);\nAverage case: O(log n);\nWorst case: O(n)",
      "deckId": 4,
      "id": 25
    },
    {
      "deckId": 4,
      "id": 26,
      "front": "What is DFS?",
      "back": "depth-first search, which is a tree-traversal algorithm that starts from the root node, explores as far as possible in a subtree, and then backtracks before moving to the next subtree. It is typically implemented recursively."
    },
    {
      "front": "What is In-order traversal?",
      "back": "traversal in which the left branch of the node is visited, then the current node is handled, and then the right branch is visited.",
      "deckId": 4,
      "id": 27
    },
    {
      "front": "What is pre-order traversal?",
      "back": "traversal in which the current node is handled first, then the left branch of the node is visited, and then the right branch is visited.",
      "deckId": 4,
      "id": 28
    },
    {
      "front": "What is Post-order traversal?",
      "back": "traversal in which the left branch is visited, then the right branch is visited, and then the current node is handles.",
      "deckId": 4,
      "id": 29
    },
    {
      "front": "What is the time complexity of Depth-First-Search",
      "back": "Because each node in the BST is visited, the time complexity is O(n). In this case n represents the number of nodes in the tree.",
      "deckId": 4,
      "id": 30
    },
    {
      "front": "Breadth-First Search",
      "back": "BFS, a tree-traversal algorithm that starts at the root node and proceeds level by level",
      "deckId": 4,
      "id": 31
    },
    {
      "front": "What is the time complexity for breadth-first search?",
      "back": "O(n), where n represents the number of nodes in the tree because each node needs to be visited once.",
      "deckId": 4,
      "id": 32
    },
    {
      "front": "Linked List",
      "back": "An ordered, linear data structure in which each item contains a reference to the next item.",
      "deckId": 5,
      "id": 33
    },
    {
      "front": "Head",
      "back": "A reference to the first node in a linked list.",
      "deckId": 5,
      "id": 34
    },
    {
      "front": "Tail",
      "back": "The last node in a linked list",
      "deckId": 5,
      "id": 35
    },
    {
      "front": "Singly Linked List",
      "back": "A linked list in which each node contains exactly one reference to the next node",
      "deckId": 5,
      "id": 36
    },
    {
      "front": "Doubly Linked List",
      "back": "A linked list in which each node contains two references: a reference to the next node and a reference to the previous node",
      "deckId": 5,
      "id": 37
    },
    {
      "front": "Circular Linked List",
      "back": "A linked list in which the last node points to the first node or another node before it, thereby forming a loop.",
      "deckId": 5,
      "id": 38
    },
    {
      "front": "When are linked lists most efficient?",
      "back": "When inserting and removing data at the beginning of the list.",
      "deckId": 5,
      "id": 39
    },
    {
      "deckId": 5,
      "id": 40,
      "front": "Explain `insertAtHead()`. What is its big O?",
      "back": "Inserting only in the first position, regardless of the length of the list.\nO(1)"
    },
    {
      "front": "Explain `insert()` . What is its big O?",
      "back": "Requires iterating over all of the nodes until you reach the end of the list. O(n)",
      "deckId": 5,
      "id": 41
    },
    {
      "front": "Explain find(). What is its big O?",
      "back": "Requires iterating over all of the nodes until you find the node. O(n)",
      "deckId": 5,
      "id": 42
    },
    {
      "front": "explain `remove()`, What is its big O?",
      "back": "Requires iterating over all of the nodes until you find the node to remove. O(n)",
      "deckId": 5,
      "id": 43
    },
    {
      "front": "Describe a Stack",
      "back": "A stack is a vertical data structure. It is like a linked list in that it has access restricted to only one end. It stores elements in LIFO --last in first out-- order.",
      "deckId": 6,
      "id": 44
    },
    {
      "front": "What is a standard way to implement a stack?",
      "back": "Use a singly linked list with constraints on its operations--items can be inserted and deleted at only one place: the end of the list.",
      "deckId": 6,
      "id": 45
    },
    {
      "front": "What are the two primary functions of a stack?",
      "back": "push()--places data onto the top of a stack (insertion).\n\npop()--removes data from the top of the stack(deletion)",
      "deckId": 6,
      "id": 46
    },
    {
      "front": "Explain the time complexity for the push() method to add a node to the top of a stack.",
      "back": "Since you are only adding to the top of the stack, the time complexity is constant O(1).",
      "deckId": 6,
      "id": 47
    },
    {
      "front": "How do you write a push() method for a stack?",
      "back": "push(value) {\nthis.top = new Node(value, this.top);\nreturn this;\n}",
      "deckId": 6,
      "id": 48
    },
    {
      "front": "",
      "back": "",
      "deckId": 6,
      "id": 49
    },
    {
      "front": "Explain the time complexity of the",
      "back": "Because you are removing only from the top of the stack, time complexity is constant, O(1)",
      "deckId": 6,
      "id": 50
    },
    {
      "front": "How do you create pop() method for a stack?",
      "back": "pop() { const popped = this.top; this.top = popped.next; return popped.value; }",
      "deckId": 6,
      "id": 51
    },
    {
      "front": "Describe a Queue",
      "back": "A queue is a horizontal data structure that stores data in a first in, first out order (FIFO). Think: First Come,, First Serverd",
      "deckId": 6,
      "id": 52
    },
    {
      "front": "What are two of the main functions of a queue (describe them)",
      "back": "enqueue(data): data is inserted a the end of a queue (list); and dequeue(): removes the oldest data at the beginning of the list, which was added to the queue first (deletion).",
      "deckId": 6,
      "id": 53
    },
    {
      "front": "Document Object Model (DOM)",
      "back": "the data representation of the HTML elements that make up the structure of a web page. The DOM serves as a way for JavaScript to understand the structure of an HTML page in order to make it dynamic.",
      "deckId": 3,
      "id": 54
    },
    {
      "front": "Definition of Child Element",
      "back": "an element that is nested inside another element",
      "deckId": 3,
      "id": 55
    },
    {
      "front": "Parent Element",
      "back": "An element that has one or more elements nested inside it",
      "deckId": 3,
      "id": 56
    },
    {
      "front": "How do you write the code to connect a JavaScript file to index.html?",
      "back": "<script src=\"/path/index.js\"></script>",
      "deckId": 3,
      "id": 57
    },
    {
      "front": "What is the <noscript> tag used for, and how is it written?",
      "back": "It can notify users that the website depends on scripts. <noscript>This site requires JavaScript.</noscript>",
      "deckId": 3,
      "id": 58
    },
    {
      "deckId": 3,
      "id": 59,
      "front": "What are two ways of searching the DOM to find elements so that you can manipulate HTML with JavaScript.",
      "back": "querySelector() and querySelectorAll()"
    },
    {
      "front": "Define Node",
      "back": "An element in a tree structure.",
      "deckId": 3,
      "id": 60
    },
    {
      "deckId": 3,
      "id": 61,
      "front": "What is a node list?",
      "back": "A list of elements that match a given selector. A node list is not an array, but it provides several properties that allow it to be processed like an array."
    },
    {
      "front": "Developer Tools: What does the Element inspector do?",
      "back": "It allows you to inspect a particular element on the page.",
      "deckId": 3,
      "id": 62
    },
    {
      "front": "Developer Tools: What does the Styles tab allow you to do?",
      "back": "It allows ou to see which styles have been applied to a particular element.",
      "deckId": 3,
      "id": 63
    },
    {
      "front": "Developer tools: What does the device toolbar allow you to see?",
      "back": "It allows you to see what your website will look like on various devices.",
      "deckId": 3,
      "id": 64
    },
    {
      "front": "What does the querySelector() method do?",
      "back": "It is a built-in method used to search the DOM. It accepts a string that represents an HTML element and returns the first element in the DOM that matches the selector.",
      "deckId": 3,
      "id": 65
    },
    {
      "front": "How is querySelector written?",
      "back": "ex: const heading = document.querySelector(\"h1\"); console.log(heading);",
      "deckId": 3,
      "id": 66
    },
    {
      "front": "What is a selector? Name some selectors.",
      "back": "A selector is any valid CSS selector. examples: Id selector(#rating, #area); Class selector(.location, .stats); Type selector(h1, p, section) ",
      "deckId": 3,
      "id": 67
    },
    {
      "front": "What is HTMLElement? and what is an example?",
      "back": "a build-in interface that exposes properties and methods common to all elements that are found in an HTML document. An example is querySelectorAll() method",
      "deckId": 3,
      "id": 68
    },
    {
      "front": "What is the innerText property?",
      "back": "It is one of the properties exposed by the HTMLElement interface. It contains any text that is contained between the opening and closing tags of an element.",
      "deckId": 3,
      "id": 69
    },
    {
      "front": "What is classList property?",
      "back": "The classList property is a list of the classes that are applied to an element. It provides methods to add() and remove() classes.",
      "deckId": 3,
      "id": 70
    },
    {
      "front": "What is React?",
      "back": "A powerful tool that makes it easier to build complex web applications that rely on DOM manipulation",
      "deckId": 1,
      "id": 71
    },
    {
      "front": "What does using importing React and ReactDOM do?",
      "back": "React makes sure the components compile properly, and ReactDOM makes sure that the DOM-related methods to display the components into the browser are also compiled properly.",
      "deckId": 1,
      "id": 72
    },
    {
      "front": "Which function does React use to display the component into the web page?",
      "back": "render() function, which takes two arguments: the react component to be rendered and the DOM container where it should be placed. ",
      "deckId": 1,
      "id": 73
    },
    {
      "front": "Which element does the create react app setup use as the DOM container, and how is it obtained?",
      "back": "The \"root\" element is obtained with `document.getElementById(\"root\")",
      "deckId": 1,
      "id": 74
    },
    {
      "front": "What is a component and of what are components comprised?",
      "back": "A component is a single part of a user interface that can be used in multiple places. Components are made up of multiple elements like <h1> or <img>, but with specific properties for the application. It can be a single HTML element, but it's usually made up of a collection of elements. ",
      "deckId": 1,
      "id": 75
    },
    {
      "front": "Define JSX",
      "back": "JSX is an HTML like syntax for defining user interface elements inside the React code.",
      "deckId": 1,
      "id": 76
    },
    {
      "front": "What is a functional component?",
      "back": "A JavaScript component that returns JSX",
      "deckId": 1,
      "id": 78
    },
    {
      "deckId": 1,
      "id": 79,
      "front": "Define Prop",
      "back": "An input passed into a React component as an object. Used to customize the data in each component."
    },
    {
      "deckId": 7,
      "id": 80,
      "front": "Define Hook",
      "back": "A special React function that gives you access to some react process. You could say that it hooks into some react process."
    },
    {
      "front": "Explain the concept of one-way data flow,",
      "back": "This is the idea that changes in props or state will cascade downward to cause changes further on. Also called one-way binding.",
      "deckId": 7,
      "id": 81
    },
    {
      "deckId": 7,
      "id": 82,
      "front": "Explain State.",
      "back": "React components use state to store information that is updated by the component. State refers to data that affects how the application behaves and is rendered. Every React component can have its own state. Simply: state is the data that changes as the user interacts with the component."
    },
    {
      "front": "How do you create and edit State, and what does this allow you to do?",
      "back": "Use the useState() hook, which allows you to change the interface, which allows you to create and edit state, whick can change the interface. useState() hooks into the components state.",
      "deckId": 7,
      "id": 83
    },
    {
      "front": "Race Condition",
      "back": "Also called a race hazard. It is a condition where a program depends on the relative timing of one or more process to function correctly.",
      "deckId": 7,
      "id": 84
    },
    {
      "front": "Lifting Up State: explain.",
      "back": "The process of moving state higher up in the tree so that state can be passed from a parent component to multiple children. ",
      "deckId": 7,
      "id": 85
    },
    {
      "front": "explain useEffect()",
      "back": "A React hook; perform side effects, accepts a callback function. Within the callback the useEffect function is performed.  useEffect accepts a second parameter that can be used to stop the render by passing an empty array.",
      "deckId": 7,
      "id": 86
    },
    {
      "front": "A function that modifies the DOM element is introducing _________",
      "back": "a side effect",
      "deckId": 7,
      "id": 87
    },
    {
      "front": "Examples of side Effects in React function components",
      "back": "Making asynchronous API call for data; updating a Dom element; updating a variable that isnt a local variable ; ",
      "deckId": 7,
      "id": 88
    },
    {
      "front": "REST stands for",
      "back": "Representational State Transfer",
      "deckId": 7,
      "id": 89
    },
    {
      "front": "How does the server respond when a client makes a request for a resource using a REST API?",
      "back": "The server transfers back the current state of the resource in a standardized representation. ",
      "deckId": 7,
      "id": 90
    },
    {
      "front": "What is the global fetch() function used for?",
      "back": "At least one this is to make API calls.",
      "deckId": 7,
      "id": 91
    },
    {
      "front": "Why is useEffect()  needed for API calls?",
      "back": "It avoids being stuck in an infinite loop with fetch() triggered, then setUser and update the state, which would trigger a rerender that would call fetch().... ad infinitum",
      "deckId": 7,
      "id": 92
    }
  ]
}